// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: inventory/inventory.proto

package inventory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InventoryService_AddCar_FullMethodName              = "/carrental.com.proto.inventory.InventoryService/AddCar"
	InventoryService_UpdateCar_FullMethodName           = "/carrental.com.proto.inventory.InventoryService/UpdateCar"
	InventoryService_DeleteCar_FullMethodName           = "/carrental.com.proto.inventory.InventoryService/DeleteCar"
	InventoryService_GetCarByID_FullMethodName          = "/carrental.com.proto.inventory.InventoryService/GetCarByID"
	InventoryService_SearchAvailableCars_FullMethodName = "/carrental.com.proto.inventory.InventoryService/SearchAvailableCars"
	InventoryService_CheckAvailability_FullMethodName   = "/carrental.com.proto.inventory.InventoryService/CheckAvailability"
	InventoryService_UpdateCarStatus_FullMethodName     = "/carrental.com.proto.inventory.InventoryService/UpdateCarStatus"
	InventoryService_ListCarsByIDs_FullMethodName       = "/carrental.com.proto.inventory.InventoryService/ListCarsByIDs"
)

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryServiceClient interface {
	AddCar(ctx context.Context, in *AddCarRequest, opts ...grpc.CallOption) (*CarResponse, error)
	UpdateCar(ctx context.Context, in *UpdateCarRequest, opts ...grpc.CallOption) (*CarResponse, error)
	DeleteCar(ctx context.Context, in *CarIDRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetCarByID(ctx context.Context, in *CarIDRequest, opts ...grpc.CallOption) (*CarResponse, error)
	SearchAvailableCars(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*CarListResponse, error)
	CheckAvailability(ctx context.Context, in *AvailabilityRequest, opts ...grpc.CallOption) (*AvailabilityResponse, error)
	UpdateCarStatus(ctx context.Context, in *CarStatusRequest, opts ...grpc.CallOption) (*CarResponse, error)
	ListCarsByIDs(ctx context.Context, in *CarIDListRequest, opts ...grpc.CallOption) (*CarListResponse, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) AddCar(ctx context.Context, in *AddCarRequest, opts ...grpc.CallOption) (*CarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CarResponse)
	err := c.cc.Invoke(ctx, InventoryService_AddCar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateCar(ctx context.Context, in *UpdateCarRequest, opts ...grpc.CallOption) (*CarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CarResponse)
	err := c.cc.Invoke(ctx, InventoryService_UpdateCar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteCar(ctx context.Context, in *CarIDRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, InventoryService_DeleteCar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetCarByID(ctx context.Context, in *CarIDRequest, opts ...grpc.CallOption) (*CarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CarResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetCarByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) SearchAvailableCars(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*CarListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CarListResponse)
	err := c.cc.Invoke(ctx, InventoryService_SearchAvailableCars_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CheckAvailability(ctx context.Context, in *AvailabilityRequest, opts ...grpc.CallOption) (*AvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AvailabilityResponse)
	err := c.cc.Invoke(ctx, InventoryService_CheckAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateCarStatus(ctx context.Context, in *CarStatusRequest, opts ...grpc.CallOption) (*CarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CarResponse)
	err := c.cc.Invoke(ctx, InventoryService_UpdateCarStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ListCarsByIDs(ctx context.Context, in *CarIDListRequest, opts ...grpc.CallOption) (*CarListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CarListResponse)
	err := c.cc.Invoke(ctx, InventoryService_ListCarsByIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations must embed UnimplementedInventoryServiceServer
// for forward compatibility.
type InventoryServiceServer interface {
	AddCar(context.Context, *AddCarRequest) (*CarResponse, error)
	UpdateCar(context.Context, *UpdateCarRequest) (*CarResponse, error)
	DeleteCar(context.Context, *CarIDRequest) (*DeleteResponse, error)
	GetCarByID(context.Context, *CarIDRequest) (*CarResponse, error)
	SearchAvailableCars(context.Context, *SearchRequest) (*CarListResponse, error)
	CheckAvailability(context.Context, *AvailabilityRequest) (*AvailabilityResponse, error)
	UpdateCarStatus(context.Context, *CarStatusRequest) (*CarResponse, error)
	ListCarsByIDs(context.Context, *CarIDListRequest) (*CarListResponse, error)
	mustEmbedUnimplementedInventoryServiceServer()
}

// UnimplementedInventoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServiceServer struct{}

func (UnimplementedInventoryServiceServer) AddCar(context.Context, *AddCarRequest) (*CarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCar not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateCar(context.Context, *UpdateCarRequest) (*CarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCar not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteCar(context.Context, *CarIDRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCar not implemented")
}
func (UnimplementedInventoryServiceServer) GetCarByID(context.Context, *CarIDRequest) (*CarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarByID not implemented")
}
func (UnimplementedInventoryServiceServer) SearchAvailableCars(context.Context, *SearchRequest) (*CarListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAvailableCars not implemented")
}
func (UnimplementedInventoryServiceServer) CheckAvailability(context.Context, *AvailabilityRequest) (*AvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAvailability not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateCarStatus(context.Context, *CarStatusRequest) (*CarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCarStatus not implemented")
}
func (UnimplementedInventoryServiceServer) ListCarsByIDs(context.Context, *CarIDListRequest) (*CarListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCarsByIDs not implemented")
}
func (UnimplementedInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {}
func (UnimplementedInventoryServiceServer) testEmbeddedByValue()                          {}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_AddCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).AddCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_AddCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).AddCar(ctx, req.(*AddCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UpdateCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateCar(ctx, req.(*UpdateCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_DeleteCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteCar(ctx, req.(*CarIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetCarByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetCarByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetCarByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetCarByID(ctx, req.(*CarIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_SearchAvailableCars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).SearchAvailableCars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_SearchAvailableCars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).SearchAvailableCars(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CheckAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CheckAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CheckAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CheckAvailability(ctx, req.(*AvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateCarStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateCarStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UpdateCarStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateCarStatus(ctx, req.(*CarStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ListCarsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarIDListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ListCarsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ListCarsByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ListCarsByIDs(ctx, req.(*CarIDListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "carrental.com.proto.inventory.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCar",
			Handler:    _InventoryService_AddCar_Handler,
		},
		{
			MethodName: "UpdateCar",
			Handler:    _InventoryService_UpdateCar_Handler,
		},
		{
			MethodName: "DeleteCar",
			Handler:    _InventoryService_DeleteCar_Handler,
		},
		{
			MethodName: "GetCarByID",
			Handler:    _InventoryService_GetCarByID_Handler,
		},
		{
			MethodName: "SearchAvailableCars",
			Handler:    _InventoryService_SearchAvailableCars_Handler,
		},
		{
			MethodName: "CheckAvailability",
			Handler:    _InventoryService_CheckAvailability_Handler,
		},
		{
			MethodName: "UpdateCarStatus",
			Handler:    _InventoryService_UpdateCarStatus_Handler,
		},
		{
			MethodName: "ListCarsByIDs",
			Handler:    _InventoryService_ListCarsByIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory/inventory.proto",
}
